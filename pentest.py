import time
import traceback
from typing import Optional
import click
from prompt_toolkit import prompt
from prompt_toolkit.shortcuts import confirm
from rich.console import Console
from actions.planner import Planner
from actions.shell_manager import ShellManager
from db.models.session_model import Session
from db.repository.plan_repository import get_planner_by_id
from db.repository.session_repository import fetch_all_sessions, add_session_to_db
from db.repository.task_repository import add_task_to_plan
from roles.collector import Collector
from roles.exploiter import Exploiter
from roles.scanner import Scanner
from utils.log_common import RoleType


def preload_session(console):
    if continue_from_previous := confirm(
        "Do you want to continue from a previous session?"
    ):
        sessions = fetch_all_sessions()
        if len(sessions) == 0:
            console.print("No previous session found. Please start a new session.")
            return None
        else:
            console.print("Please select the previous session by its index (integer):")
            for i, session in enumerate(sessions):
                console.print(f"{str(i)}. {session.name} (Session ID: {session.id})")
            try:
                selected_session = sessions[
                    int(input("Please key in your option (integer): "))
                ]
                console.print(f"You selected: {selected_session.name}")
                return selected_session
            except (ValueError, IndexError) as e:
                console.print("You input an invalid option. Will start a new session.")
                return None
    elif continue_from_previous is False:
        return None
    else:
        print("You input an invalid option. Will start a new session.")
        return None


def initialize_session(previous_session: Optional[Session] = None) -> Session:
    if previous_session:
        session = previous_session
    else:
        init_description = prompt(
            "Please describe the penetration testing task.\n> ",
        )
        session = Session(
            current_role_name=RoleType.COLLECTOR.value,
            init_description=init_description,
            current_planner_id="",
            history_planner_ids=[],
        )
    return session


def save_session(console, session):
    console.print("Before you quit, you may want to save the current session.")
    save_name = prompt(
        "Please enter the name of the current session. (Default with current timestamp)\n "
    )
    if save_name == "":
        save_name = str(time.time())
    session.name = save_name
    add_session_to_db(session_data=session)
    console.print(f"The current session is saved with the name {save_name}")
    return


def interactive_menu(console):
    """Display interactive menu and get user choice"""
    console.print("\n=== VulnBot Interactive Menu ===")
    console.print("1. Start new penetration testing session")
    console.print("2. Continue existing session")
    console.print("3. View all sessions")
    console.print("4. Exit")

    choice = prompt("Please select an option (1-4): ")
    return choice


def run_role_session(console, session, max_interactions):
    """Run a single role session"""
    roles = {
        RoleType.COLLECTOR.value: Collector,
        RoleType.SCANNER.value: Scanner,
        RoleType.EXPLOITER.value: Exploiter,
    }

    role = roles.get(session.current_role_name)
    if not role:
        console.print(f"Unknown role: {session.current_role_name}", style="bold red")
        return False

    try:
        current_role = role(console, max_interactions)
        current_role.run(session)
        return True
    except Exception as e:
        if "current_role" in locals():
            current_role.put_message(session)
        console.print(f"Exception: {e}", style="bold red")
        console.print(traceback.format_exc(), style="dim")
        return False


@click.command(help="VulnBot - Interactive Penetration Testing Tool")
@click.option(
    "-m",
    "--max_interactions",
    "max_interactions",
    default=5,
    help="Maximum interactions per role",
)
@click.option(
    "--interactive",
    is_flag=True,
    default=True,
    help="Run in interactive mode (default)",
)
def main(max_interactions, interactive):
    try:
        console = Console()
        console.print("Welcome to VulnBot!", style="bold green")

        if interactive:
            # Interactive mode with menu
            while True:
                try:
                    choice = interactive_menu(console)

                    if choice == "1":
                        # Start new session
                        session = initialize_session()
                        if run_role_session(console, session, max_interactions):
                            save_session(console, session)

                    elif choice == "2":
                        # Continue existing session
                        previous_session = preload_session(console)
                        if previous_session:
                            if run_role_session(
                                console, previous_session, max_interactions
                            ):
                                save_session(console, previous_session)

                    elif choice == "3":
                        # View all sessions
                        sessions = fetch_all_sessions()
                        if sessions:
                            console.print("All sessions:")
                            for i, session in enumerate(sessions):
                                console.print(f"{i}. {session.name} (ID: {session.id})")
                        else:
                            console.print("No sessions found.")

                    elif choice == "4":
                        console.print("Goodbye!", style="bold blue")
                        break

                    else:
                        console.print(
                            "Invalid option. Please try again.", style="yellow"
                        )

                except KeyboardInterrupt:
                    console.print("\nExiting VulnBot...", style="yellow")
                    break
                except Exception as e:
                    console.print(f"Unexpected error: {e}", style="bold red")
                    if not confirm("Do you want to continue?"):
                        break
        else:
            # Original single-run mode
            previous_session = preload_session(console)
            session = initialize_session(previous_session)

            if run_role_session(console, session, max_interactions):
                save_session(console, session)

    finally:
        ShellManager.get_instance().close()


if __name__ == "__main__":
    main()
