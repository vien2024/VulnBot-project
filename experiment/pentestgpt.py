import asyncio
import textwrap
import time
import json
import os
import traceback

import click
from prompt_toolkit import prompt
from prompt_toolkit.shortcuts import confirm
from rich.console import Console

import loguru

from actions.shell_manager import ShellManager
from experiment.extract_code import ExtractCode
from experiment.llm_ollama import OLLAMAPI, OPENAI
from experiment.pentestgpt_prompt import PentestGPTPrompt
from experiment.prompt_select import prompt_ask


logger = loguru.logger


class PentestGPT:
    def __init__(self, max_interactions, agent):

        self.console = Console()
        self.prompts = PentestGPTPrompt()
        self.max_interactions = max_interactions
        self.chat_count = 0
        self.generation_session_id = None
        self.reasoning_session_id = None
        self.parsing_session_id = None
        self.parsing_char_window = 16000
        self.agent = agent

    def reasoning_handler(self, text) -> str:
        # summarize the contents if necessary.
        if len(text) > self.parsing_char_window:
            text = self.input_parsing_handler(text)

        _updated_ptt_response = self.agent.send_message(
            self.prompts.process_results + text, self.reasoning_session_id
        )

        _task_selection_response = self.agent.send_message(
            self.prompts.process_results_task_selection, self.reasoning_session_id
        )
        response = _updated_ptt_response + _task_selection_response

        return response

    def code_handler(self, next_task) -> str:

        self.chat_count += 1

        writer = ExtractCode(next_task=next_task, agent=self.agent)
        result = writer.run()

        self.console.print("---------- Execute Result ---------", style="bold green")
        self.console.print(result)
        self.console.print("---------- Execute Result End ---------", style="bold green")

        with self.console.status("[bold green] PentestGPT Thinking...") as status:
            parsed_input = self.input_parsing_handler(
                result
            )
            reasoning_response = self.reasoning_handler(parsed_input)

        return reasoning_response

    def input_parsing_handler(self, text) -> str:
        prefix = ("Please summarize the following input. "
                  "The input content is from a security testing tool. You need to list down all the points that are interesting to you; you should summarize it as if you are reporting to a senior penetration tester for further guidance.\n")

        # The default token-size limit is 4096 (web UI even shorter). 1 token ~= 4 chars in English
        # Use textwrap to split inputs. Limit to 2000 token (8000 chars) for each input
        # (1) replace all the newlines with spaces
        text = text.replace("\r", " ").replace("\n", " ")
        # (2) wrap the text
        wrapped_text = textwrap.fill(text, 8000)
        wrapped_inputs = wrapped_text.split("\n")
        # (3) send the inputs to chatGPT input_parsing_session and obtain the results
        summarized_content = ""
        for wrapped_input in wrapped_inputs:
            word_limit = f"Please ensure that the input is less than {8000 / len(wrapped_inputs)} words.\n"
            summarized_content += self.agent.send_message(
                prefix + word_limit + wrapped_input, self.parsing_session_id
            )

        return summarized_content

    def feed_init_prompts(self):
        init_description = prompt_ask(
            "Please describe the penetration testing task in one line, including the target IP, task type, etc.\n> ",
            multiline=False,
        )

        prefixed_init_description = self.prompts.task_description + init_description

        with self.console.status(
                "[bold green] Constructing Initial Penetration Testing Tree..."
        ) as status:

            _reasoning_response = self.agent.send_message(
                prefixed_init_description, self.reasoning_session_id
            )

        with self.console.status("[bold green] Generating Initial Task") as status:

            _generation_response = self.agent.send_message(
                self.prompts.todo_to_command + _reasoning_response,
                self.generation_session_id,
            )

        response = _reasoning_response + "\n" + _generation_response
        self.console.print("Pentest output: ", style="bold green")

        self.console.print(response)

        return _generation_response

    def initialize(self):

        with self.console.status(
                "[bold green] Initialize ChatGPT Sessions..."
        ) as status:
            try:
                (
                    text_0,
                    self.generation_session_id,
                ) = self.agent.send_new_message(
                    self.prompts.generation_session_init,
                )
                (
                    text_1,
                    self.reasoning_session_id,
                ) = self.agent.send_new_message(
                    self.prompts.reasoning_session_init
                )
                (
                    text_2,
                    self.parsing_session_id,
                ) = self.agent.send_new_message(
                    self.prompts.input_parsing_init
                )
            except Exception as e:

                logger.error(e)
        self.console.print("- ChatGPT Sessions Initialized.", style="bold green")
        next_task = self.feed_init_prompts()

        return next_task

    @classmethod
    def cleanup(cls):
        ShellManager.get_instance().close()

    def main(self):

        next_task = self.initialize()

        while self.chat_count < self.max_interactions:
            try:

                next_task = self.code_handler(next_task)

                self.console.print(
                    "-----------------------------------------", style="bold white"
                )
                if not next_task:
                    break
            except Exception as e:
                self.console.print(f"Exception: {str(e)}", style="bold red")
                self.console.print(
                    "Exception details are below.",
                    style="bold green",
                )
                print(traceback.format_exc())
                break

@click.command(help="PentestGPT")
def main():
    ollama = OPENAI()
    pentestGPT = PentestGPT(15, ollama)
    try:
        pentestGPT.main()
    finally:
        pentestGPT.cleanup()
